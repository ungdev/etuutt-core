{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Le site etu","text":"<p>Vous voulez faire du dev pour le site etu, mais vous ne savez pas par o\u00f9 commencer ? Vous \u00eates au bon endroit !</p>"},{"location":"#organisation","title":"Organisation","text":"<p>Pour comprendre le projet, vous pouvez regarder 3-Organisation.</p>"},{"location":"#au-secours-pour-moi-php-git-react-cest-du-chinois","title":"Au secours ! Pour moi, PHP, Git, React, c'est du chinois !","text":"<p>Pas de panique. Commence par configurer ton poste (1-Configuration) puis va dans le dossier 2-Formation !</p>"},{"location":"#je-connais-deja-un-peu-ou-jai-suivi-le-dossier-formation","title":"Je connais d\u00e9j\u00e0 un peu (ou j'ai suivi le dossier formation)","text":"<p>Va dans le dossier 1-Configuration pour configurer ton poste puis dans le dossier 3-Organisation pour comprendre comment le projet est fait.</p>"},{"location":"#autre","title":"Autre","text":"<ul> <li>Le dossier Repo contient des indications pour cr\u00e9er un repository.</li> </ul>"},{"location":"1-Configuration/","title":"Configuration","text":"<p>Ce dossier contient des instructions afin de pr\u00e9parer ton poste. De mani\u00e8re g\u00e9n\u00e9rale, il est recommand\u00e9 d'utiliser Linux, la configuration est beaucoup plus simple. Mais sous Windows, \u00e7a marche tr\u00e8s bien aussi en suivant les \u00e9tapes indiqu\u00e9es apr\u00e8s !</p>"},{"location":"1-Configuration/#creez-vous-un-compte-github","title":"Cr\u00e9ez-vous un compte Github","text":"<p>Vous \u00eates dessus, cliquez sur <code>Sign Up</code> en haut \u00e0 droite.</p> <p>Activez le Github Student Pack en cliquant sur le bouton \"Get your pack\" et en fournissant votre mail universitaire (UTT, ...)</p>"},{"location":"1-Configuration/#configuration-commune-a-tous-les-projets","title":"Configuration commune \u00e0 tous les projets","text":""},{"location":"1-Configuration/#installer-vscode","title":"Installer VSCode","text":"<p>Visual Studio Code est un \u00e9diteur de texte brut. Il est tr\u00e8s pratique pour \u00e9diter rapidement un fichier de configuration. Vous \u00eates bien entendu libre d'utiliser autre chose (Notepad++, Vim, ...) mais n'utilisez jamais Office ou LibreOffice pour \u00e9diter un fichier, ils n'\u00e9ditent pas de mani\u00e8re brute les fichiers, ils ajoutent des informations suppl\u00e9mentaires (mise en forme, ...) qui rendent ces fichiers inutilisables dans notre contexte.</p> <p>Allez sur le site de VSCode, t\u00e9l\u00e9chargez et installez la version correspondant \u00e0 votre PC.</p> <ul> <li>Pour Windows, laissez toutes les options par d\u00e9faut mais pensez \u00e0 cocher toutes les cases du genre <code>Ajouter VSCode au menu contextuel</code></li> <li>Pour Linux, vscode n'est pas directement accessible dans les repos traditionnels, il faut donc le t\u00e9l\u00e9charger et l'installer via votre gestionnaire de paquets (afin d'ajouter aussi le repo dans la liste de vos sources pour les mises \u00e0 jour), par exemple <code>sudo apt install ./vscode.deb</code>.</li> </ul>"},{"location":"1-Configuration/#installer-git","title":"Installer git","text":"<p>C'est un outil qui va te permettre de t\u00e9l\u00e9charger et d'envoyer du code source.</p> <ul> <li>Sur windows, il faut se rendre sur ce site, cliquer sur download. Vous arrivez sur la page des releases du projet Github correspondant. Plus bas, dans assets, t\u00e9l\u00e9chargez le fichier exe en 64bits puis installez le sur votre poste, en laissant les options par d\u00e9faut.</li> <li>Sur Linux, c'est beaucoup plus facile. Installez le paquet <code>git</code> avec votre gestionnaire de paquets (exemple : <code>sudo apt install git</code>).</li> </ul>"},{"location":"1-Configuration/#installer-commitizen","title":"Installer commitizen","text":"<p>C'est un outil qui va te permettre d'expliquer aux autres collaborateurs ce que tu as chang\u00e9 sur le code quand tu as fait une modification de mani\u00e8re standard.</p> <p>Il faut d'abord installer node.</p> <ul> <li>Sous Windows, il faut aller sur ce site, t\u00e9l\u00e9charger la version current et installer en laissant les options standards.</li> <li>Sous Linux, avec le gestionnaire de paquet, installer <code>npm</code>, soit par exemple <code>sudo apt install npm</code></li> </ul> <p>Ensuite il faut installer commitizen, pour cela, ouvrez un terminal et saisissez : <code>npm install -g commitizen</code> puis <code>npm install -g cz-conventional-changelog</code> puis <code>npm install -g cz-emoji</code>.</p>"},{"location":"1-Configuration/#configuration-specifique-a-php","title":"Configuration sp\u00e9cifique \u00e0 PHP","text":"<p>Aller dans le dossier PHP</p>"},{"location":"1-Configuration/#configuration-specifique-au-front","title":"Configuration sp\u00e9cifique au Front","text":"<p>Aller dans le dossier FRONT</p>"},{"location":"1-Configuration/FRONT/","title":"Configurer son poste pour le Front","text":""},{"location":"1-Configuration/FRONT/#installer-yarn","title":"Installer Yarn","text":"<p>Si vous avez bien suivi dans l'ordre la documentation, vous avez d\u00fb installer Node.</p> <p>Pour rappel:</p> <ul> <li>Sous Windows, il faut aller sur ce site, t\u00e9l\u00e9charger la version current et installer en laissant les options standards.</li> <li>Sous Linux, avec le gestionnaire de paquet, installer <code>npm</code>, soit par exemple <code>sudo apt install npm</code></li> </ul> <p>Il vous suffira alors de faire <code>npm install --global yarn</code></p>"},{"location":"1-Configuration/FRONT/#changer-de-documentation","title":"Changer de documentation","text":"<p>Maintenant que vous avez fait tous cela, il est temps de changer de documentation. Je vous propose donc de lire la documentation du repo ungdev/etuutt-front</p>"},{"location":"1-Configuration/PHP/","title":"Configurer PHP sur son poste","text":""},{"location":"1-Configuration/PHP/#installer-mariadb","title":"Installer mariadb","text":"<ul> <li>Sous Linux, installer le paquet <code>mariadb-server</code></li> <li>Sous Windows, aller sur ce site et installer la version 10.5 stable, et le fichier winx64.msi.<ul> <li>Cochez bien lors de l'installation <code>Modify root password</code> et notez le mdp cr\u00e9\u00e9 (faites en un simple avec juste des chiffres et des lettres, il ne servira que sur votre poste). D\u00e9cochez bien enable root access from remotes machines.</li> <li>Cochez bien <code>Install as Service</code> et <code>Enable networking</code></li> </ul> </li> </ul>"},{"location":"1-Configuration/PHP/#installer-php","title":"Installer PHP","text":"<ul> <li>Sur Linux :<ul> <li><code>sudo add-apt-repository ppa:ondrej/php</code></li> <li><code>sudo apt install php8.0 php8.0-mysql php8.0-mbstring php8.0-xml</code></li> </ul> </li> <li> <p>Sur Windows, cela se fait en plusieurs op\u00e9rations.</p> <ul> <li>Aller sur le site suivant, t\u00e9l\u00e9charger le zip (x64 non thread safe), et l'extraire dans un dossier \u00e0 la racine de votre disque dur (par exemple <code>C:\\dev-tools\\php</code>). Vous devez donc avoir, \u00e0 terme un fichier <code>php.exe</code> dans le dossier <code>C:\\dev-tools\\php</code>.</li> <li>T\u00e9l\u00e9chargez le fichier suivant et placez le dans le m\u00eame dossier que le php.exe</li> <li>Dans ce dossier, vous devez copier le <code>php.ini-development</code> en <code>php.ini</code> (faites bien une copie afin de garder le fichier d'origine en cas de souci), puis ouvrez le avec VSCode (clic-droit, Ouvrir avec code) et changez les lignes suivantes : ``` ;  Remplacer ;curl.cainfo = ;  par (sans le point virgule) curl.cainfo = \"C:\\dev-tools\\php\\cacert.pem\"</li> </ul> <p>;  Remplacer ;openssl.capath = ;  par (sans le point virgule) openssl.capath = \"C:\\dev-tools\\php\\cacert.pem\" <code>* Toujours dans le php.ini, recherchez `Dynamic Extensions`, puis d\u00e9commentez (enlevez le `;`) des lignes suivantes :</code> extension=curl extension=fileinfo extension=mbstring extension=pdo_mysql <code>`` * Recherchez \u00e9galement la ligne</code>;extension_dir = \"ext\"<code>pour la d\u00e9commenter (enlevez le</code>;<code>devant) * Il faut ensuite, dans la barre des t\u00e2ches, rechercher</code>path<code>et ouvrir</code>Modifier les variables d'environnement<code>, puis recliquez sur le bouton du bas</code>Variables d'environnement<code>puis dans</code>Variables syst\u00e8mes<code>, double cliquer sur la variable</code>Path<code>puis cliquer sur</code>Nouveau<code>et indiquer</code>C:\\dev-tools\\php` en ajoutant bien le <code>\\</code> \u00e0 la fin. Puis valider la saisie en appuyant sur entr\u00e9e puis en cliquant sur ok.</p> </li> </ul>"},{"location":"1-Configuration/PHP/#installer-composer","title":"Installer composer","text":"<ul> <li>Sous linux : r\u00e9cup\u00e9rez l'installateur avec <code>wget getcomposer.org/installer</code>. Installez composer gr\u00e2ce \u00e0 ce fichier : <code>sudo php installer --install-dir /usr/bin --filename composer</code>. Enfin, vous pouvez supprimer l'installateur, vous ne devriez plus en avoir besoin : <code>rm -f installer</code></li> <li>Sous Windows en utilisant l'installateur pr\u00e9vu \u00e0 cet effet.</li> </ul>"},{"location":"1-Configuration/PHP/#installer-lexecutable-symfony","title":"Installer l'ex\u00e9cutable Symfony","text":"<ul> <li>Linux : <code>wget https://get.symfony.com/cli/installer -O - | bash &amp;&amp; sudo mv symfony /usr/bin/symfony</code> puis <code>sudo mv /home/{NOM_LINUX}/.symfony/bin/symfony /usr/local/bin/symfony</code>. N'oubliez pas de remplacer <code>{NOM_LINUX}</code> par le nom de votre linux</li> <li>Windows : allez sur le site de Symfony pour t\u00e9l\u00e9charger l'installateur.</li> </ul>"},{"location":"1-Configuration/PHP/#installer-phpstorm","title":"Installer PHPStorm","text":"<p>Etape finale !</p> <p>PHPStorm est un des meilleurs (si ce n'est pas le meilleur) IDE pour d\u00e9velopper en PHP. C'est celui que je recommande, mais VSCode avec des extensions peut tr\u00e8s bien le faire, tout comme Atom, Vim, ... Chacun son chemin, chacun son destin !</p> <ul> <li>Se connecter \u00e0 Jetbrains avec le Github Student Pack ici, indiquez une date approximative d'obtention du dipl\u00f4me. Vous pourrez ensuite vous cr\u00e9er un compte.</li> <li>T\u00e9l\u00e9chargez ensuite la Jetbrains Toolbox</li> <li>Depuis la JetBrains Toolbox, installez ensuite PHPStorm</li> <li>Au premier lancement, Jetbrains va vous demander plusieurs choses, notamment les plugins. Installez bien les plugins :<ul> <li>.env</li> <li>EditorConfig</li> <li>Ideolog</li> <li>Symfony</li> </ul> </li> </ul>"},{"location":"2-Formation/","title":"Git \ud83c\udf3f","text":"<ul> <li>https://openclassrooms.com/fr/courses/5641721-utilisez-git-et-github-pour-vos-projets-de-developpement?archived-source=2342361</li> <li>https://learngitbranching.js.org/?locale=fr_FR</li> <li>https://try.github.io/</li> <li>Pour ceux qui adorent lire des pav\u00e9s, le livre Git Pro est vraiment bien :<ul> <li>En pdf</li> <li>En version web</li> <li>Lire les chapitres 1, 2, 3 et 6.</li> </ul> </li> </ul>"},{"location":"2-Formation/#back","title":"Back \ud83e\udde0 \ud83d\udcbe","text":"<p>PHP est un language tourn\u00e9 vers le traitement des requ\u00eates web. Il en existe d'autres qui peuvent remplir cette fonction (NodeJS, Python...).</p> <p>Nous allons utiliser Symfony pour sa simplicit\u00e9 et sa communaut\u00e9. Nous ajoutons la librairie Symfony API Platform pour avoir une API fonctionnelle qu'il nous reste \u00e0 configurer.</p> <p>PHP est tr\u00e8s puissant, mais encore plus avec Symfony, un ensemble de fonction founissant un cadre de travail (framework) tr\u00e8s pratique pour les d\u00e9veloppeurs. * Introduction \u00e0 la gestion des packages et \u00e0 Composer dans le dossier Composer * Introduction aux API * Symfony : doc dans le dossier Symfony * API Platform : Deux liens pour apprendre, SymfonyCasts et Grafikart (Cette derni\u00e8re est plus compl\u00e8te, mais il faut d\u00e9j\u00e0 avoir suivi des tutos Symfony avant)</p>"},{"location":"2-Formation/#front","title":"Front \ud83d\udcbb \ud83d\ude0d","text":"<ul> <li>React :<ul> <li>Le tutoriel</li> <li>La doc</li> </ul> </li> <li> <p>Flexbox : http://flexboxfroggy.com/#fr</p> </li> <li> <p>Exemples de projets ReactJS :</p> <ul> <li>Borne style McDo pour l'UTT Arena : https://github.com/ungdev/UA-bouffe-front</li> <li>Front de l'UTT Arena : https://github.com/ungdev/UA-front</li> </ul> </li> <li> <p>NextJS : https://nextjs.org/learn/basics/create-nextjs-app?utm_source=next-site&amp;utm_medium=homepage-cta&amp;utm_campaign=next-website</p> </li> </ul>"},{"location":"2-Formation/Composer/","title":"Composer","text":""},{"location":"2-Formation/Composer/#principe-et-fonctionnement","title":"Principe et fonctionnement","text":"<p>PHP pour faire du dev, c'est cool, mais comme tout language de programmation, il est p\u00e9nible de coder des choses qui ont s\u00fbrement d\u00e9j\u00e0 \u00e9t\u00e9 cod\u00e9es par d'autres (ex : traitement d'images, de formulaires, envoi de mails, g\u00e9n\u00e9ration de templates HTML, ...).</p> <p>C'est l\u00e0 que Composer intervient ! Cet outil permet de distribuer son code sous forme de packages, et d'en t\u00e9l\u00e9charger pour les int\u00e9grer \u00e0 notre code.</p> <p>Dans chaque projet, vous pourrez retrouver un <code>composer.json</code> \u00e0 la racine, qui contient la liste de tous les packages dont d\u00e9pend le projet actuel, sous la forme <code>auteur/package</code>. La version du package \u00e0 installer est d\u00e9termin\u00e9e comme suit : <code>\"^2.7\"</code> : installe le package avec la version la plus haute possible, mais au minimum l\u00e0 2.7, <code>\"5.1.*\"</code> : installe la version la plus haute possible du package au sein de la version 5.1...</p> <p>Les packages peuvent d\u00e9pendre d'autres packages, eux-m\u00eame avec des contraintes sur les versions. Quand on installe les packages, Composer calcule la combinaison ultime de tous les packages \u00e0 installer avec la meilleure version pour chaque, qui r\u00e9side dans le <code>composer.lock</code>. Quand on fait <code>composer install</code>, on installe exactement ce qui est sp\u00e9cifi\u00e9 dans ce fichier. <code>composer update</code> va mettre \u00e0 jour la combinaison avec les packages les plus r\u00e9cents. En prod, il faut donc faire syst\u00e9matiquement <code>composer install</code> pour avoir des packages stables et \u00e9prouv\u00e9s par les d\u00e9veloppeurs.</p> <p>Il y a plusieurs blocs : require, et require-dev. En production, on installe uniquement les paquets n\u00e9cessaires pour faire tourner l'application (<code>composer install --no-dev</code>), alors qu'en dev on installe tous les paquets, y compris ceux qui n'aident que les d\u00e9veloppeurs (d\u00e9buggages, fixtures, ...) : <code>composer install</code>.</p> <p>Pour installer un package, il suffit de taper : <code>composer require auteur/package [version]</code>.</p>"},{"location":"2-Formation/Composer/#stockage-des-paquets","title":"Stockage des paquets","text":"<p>Les fragments de codes distribu\u00e9s sous formes de packages sont install\u00e9s dans le dossier <code>vendor</code> de votre projet.</p> <p>Ce dossier est en g\u00e9n\u00e9ral assez gros (il faut compter les d\u00e9pendences directes mais aussi indirectes : les d\u00e9pendances des d\u00e9pendances), et il est r\u00e9sum\u00e9 dans les fichiers <code>composer.json</code> et <code>composer.lock</code>. Ces deux fichiers suffisent, il suffit de faire <code>composer install</code>. Il faut donc exclure le dossier <code>vendor</code> du repo git, via le .gitignore, qui doit comprendre une ligne <code>/vendor/</code> signifiant que ce dossier est exclu.</p>"},{"location":"2-Formation/Symfony/","title":"Symfony","text":"<p>Symfony fournit un cadre de travail qui facilite la vie des d\u00e9veloppeurs web, avec, entre autres : * Connexion simplifi\u00e9e \u00e0 la base de donn\u00e9es via Doctrine * Gestion des formulaires * Templates pour l'affichage * S\u00e9curit\u00e9 / Authentification * Gestion de la session utilisateur * Templating HTML puissant via Twig * Permet de relier tr\u00e8s facilement des routes (url) \u00e0 des fonctions renvoyant des donn\u00e9es (HTML, json, ...)</p>"},{"location":"2-Formation/Symfony/#framework-mvc","title":"Framework MVC","text":"<p>Symfony est un framework dit MVC car il permet de d\u00e9finir et relier : * Mod\u00e8les. Ce sont des repr\u00e9sentations informatiques d'objets de la vie courante (utilisateur, association, \u00e9v\u00e8nement, cours, ...). Ces mod\u00e8les sont aussi appel\u00e9s Entit\u00e9s. Symfony, via Doctrine, fournit des commandes simples et efficaces pour g\u00e9rer ces identit\u00e9s, comme d\u00e9crit dans le fichier entities.md ou sur la doc officielle. * Vues. C'est ce qui est renvoy\u00e9 \u00e0 l'utilisateur (HTML) * Controlleurs. C'est le lien entre les mod\u00e8les et les vues, c'est l\u00e0 que se fait la logique qui permet \u00e0 un utilisateur qui saisit une URL de recevoir une r\u00e9ponse.</p>"},{"location":"2-Formation/Symfony/#doc-generale","title":"Doc g\u00e9n\u00e9rale","text":"<p>6 \u00e9tapes pour comprendre comment Symfony fonctionne</p> <ul> <li>Exemples de projets Symfony 5 :<ul> <li>Une appli de sondage connect\u00e9e au site etu : https://github.com/larueli/kimanj</li> <li>Une appli de gestion de stock : https://github.com/larueli/stock</li> </ul> </li> </ul>"},{"location":"2-Formation/Symfony/entities/","title":"Les entit\u00e9s en Symfony","text":""},{"location":"2-Formation/Symfony/entities/#les-entites","title":"Les entit\u00e9s","text":""},{"location":"2-Formation/Symfony/entities/#une-entite-quesako","title":"Une entit\u00e9, qu\u00e9sako ?","text":"<p>Une entit\u00e9, c'est une classe / un objet. Pour ceux qui ne connaissent pas la programmation orient\u00e9e objet, voici les grandes lignes : * Tout est d\u00e9crit par des objets / classes / mod\u00e8les / entit\u00e9s (termes plus ou moins \u00e9quivalents) * Un objet (exemple : une voiture) contient plusieurs choses :     * Des propri\u00e9t\u00e9s : ce sont des variables sp\u00e9cifiques \u00e0 l'objet (exemple : vitesse, nombre de places disponibles, d\u00e9g\u00e2ts, ...). Bref, tout ce qui d\u00e9crit l'objet.     * Des m\u00e9thodes : ce sont des actions que peut faire l'objet, d\u00e9crites sous la forme de fonctions. Exemple : <code>ajouterPassager(mailPassager)</code>. Cette fonction v\u00e9rifie le nombre de places encore disponible, diminuera le nombre de place de la voiture de 1, envoie un mail au nouveau passager et renvoie <code>True</code> s'il y avait encore assez de place pour ce passager. * Un objet repr\u00e9sente parfois quelque chose qui existe dans la vraie vie (un \u00e9v\u00e8nement, une association, un utilisateur, ...) et qui doit \u00eatre stock\u00e9 dans la base de donn\u00e9es. Dans ce cas, il s'agit sp\u00e9cifiquement d'une entit\u00e9 (terminologie Symfony).</p>"},{"location":"2-Formation/Symfony/entities/#instancier-une-entite-et-acceder-a-ses-composantes","title":"Instancier une entit\u00e9 et acc\u00e9der \u00e0 ses composantes","text":"<ul> <li>Votre objet / classe est purement th\u00e9orique. Pour cr\u00e9er r\u00e9ellement une voiture, il faut instancier la classe correspondante. En PHP, on utilise le mot clef <code>new</code>, vous pourrez ensuite acc\u00e9der aux composantes de cette mani\u00e8re : </li> </ul> <pre><code>$maVoiture = new Voiture();\n$maVoiture-&gt;vitesse = 20;\n$maVoiture-&gt;placesDisponibles = 4;\n$maVoiture-&gt;ajouterPassager(\"jean@dupont.fr\");\n</code></pre> <ul> <li>Chaque m\u00e9thode ou propri\u00e9t\u00e9 a une visibilit\u00e9. Si la variable ou m\u00e9thode est d\u00e9clar\u00e9e priv\u00e9e, on ne peut pas y acc\u00e9der de l'ext\u00e9rieur, exemple, si je d\u00e9finis la variable vitesse comme priv\u00e9e, je ne pourrai pas utiliser <code>$maVoiture-&gt;vitesse;</code>. On peut en revanche cr\u00e9er une m\u00e9thode publique <code>getVitesse()</code> et <code>setVitesse(vitesse)</code> qui vont respectivement renvoyer la vitesse et d\u00e9finir la vitesse. L'avantage, c'est que l'on peut d\u00e9finir une logique ! On pourrait imaginer une v\u00e9rification syst\u00e9matique qu'on ne d\u00e9passe pas une vitesse max en fixant la vitesse : cela se fera dans la fonction <code>setVitesse</code>. Ces fonctions publiques qui servent \u00e0 modifier ou r\u00e9cup\u00e9rer la valeur d'un attribut priv\u00e9 sont appel\u00e9es les getters et setters. C'est le comportement par d\u00e9faut d'une entit\u00e9 en Symfony.</li> </ul>"},{"location":"2-Formation/Symfony/entities/#les-namespaces","title":"Les namespaces","text":""},{"location":"2-Formation/Symfony/entities/#pour-aller-plus-loin","title":"Pour aller plus loin","text":"<ul> <li>Par convention (PSR4) :<ul> <li>une seule classe par fichier</li> <li>si la classe s'appelle Voiture, le fichier associ\u00e9 doit s'appeller <code>Voiture.php</code></li> </ul> </li> <li>En g\u00e9n\u00e9ral on utilise PascalCase pour les noms de classes et camelCase pour les propri\u00e9t\u00e9s et m\u00e9thodes (voir la section organisation).</li> <li>Bizarre, <code>$maVoiture = new Voiture()</code>, on dirait que Voiture est une fonction qui peut prendre des param\u00e8tres ? En fait, vous pouvez d\u00e9finir une m\u00e9thode <code>__construct(param1, param2, ...)</code> (avec deux <code>_</code>) qui va r\u00e9aliser des actions par d\u00e9faut quand vous allez instancier votre classe, comme mettre la vitesse \u00e0 0 pour notre voiture, lui fixer un nom directement, ...</li> <li>On ne copie pas facilement une entit\u00e9.</li> </ul> <pre><code>$maClio = new Voiture();\n$maClio-&gt;vitesse = 50;\n$monKangoo = $maClio; // copie ?\n$monKangoo-&gt;vitesse = 20;\n\n$monKangoo-&gt;vitesse; // 20\n$maClio-&gt;vitesse; // 20 aussi...\n</code></pre> <p>En fait, c'est comme un tableau. La variable contient simplement une r\u00e9f\u00e9rence vers l'instance de l'objet. Copier la variable, c'est juste copier la r\u00e9f\u00e9rence. Pour plus d'infos, renseignez-vous sur les deep copy.</p>"},{"location":"2-Formation/Symfony/entities/#les-entites-en-symfony_1","title":"Les entit\u00e9s en Symfony","text":"<p>Une entit\u00e9 en Symfony est une entit\u00e9 particuli\u00e8re car elle est interpr\u00e9t\u00e9e de fa\u00e7on \u00e0 ce que chacune de ses instances puisse \u00eatre stock\u00e9e dans une base de donn\u00e9es.</p> <p>Lisez la documentation Symfony sur le sujet ! https://symfony.com/doc/current/doctrine.html</p>"},{"location":"2-Formation/Symfony/entities/#base-de-donnee","title":"Base de donn\u00e9e ?","text":"<p>Pour la faire tr\u00e8s courte : une base de donn\u00e9e SQL, c'est comme un grand classeur excel, avec plusieurs feuilles, nos donn\u00e9es sont stock\u00e9es sur les lignes. Notre application est dans une base de donn\u00e9es contenant plusieurs tables (feuilles), et chaque table correspond \u00e0 une entit\u00e9, les colonnes correspondant aux noms des propri\u00e9t\u00e9s. SQL d\u00e9finit aussi une syntaxe permettant de manipuler les entr\u00e9es / tables / ...</p> <p>Avant, il fallait programmer la liaison vers la BDD \u00e0 la main, manuellement cr\u00e9er les entr\u00e9es dans la BDD, programmer en SQL, ... Aujourd'hui, Doctrine est le composant qui fait cette liaison avec PHP, et en r\u00e8gle g\u00e9n\u00e9rale on n'a m\u00eame plus de SQL \u00e0 taper.</p> <p>Doctrine est appel\u00e9 via des annotations qui sont des fragments de code dans des commentaires (oui oui vous avez bien lu, m\u00eame les commentaires sont interpr\u00e9t\u00e9s, s'ils commencent par @ !). Si, dans une classe du namespace App\\Entity, il y a des annotations faisant r\u00e9f\u00e9rence \u00e0 Doctrine, un stockage dans la BDD est pr\u00e9vu.</p> <p>Note : on verra parfois le sigle DB pour parler des BDD. C'est enfaite l'abr\u00e9viation de \"DataBase\", pour nos camarades anglophones.</p> <pre><code>&lt;?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\Mapping as ORM;\n\n/**\n * @ORM\\Entity(repositoryClass=UserRepository::class)\n */\nclass User\n{\n    /**\n     * @ORM\\Id\n     * @ORM\\GeneratedValue\n     * @ORM\\Column(type=\"integer\")\n     */\n    private $id;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $casUid;\n\n    /**\n     * @ORM\\Column(type=\"integer\", nullable=true)\n     */\n    private $userId;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255, nullable=true)\n     */\n    private $ldapUNGUid;\n\n    // getters et setters\n}\n</code></pre> <p>Une commande toute pr\u00eate permet de manipuler les entit\u00e9s : <code>php bin/console make:entity</code>. Vous pouvez aussi faire des relations entre entit\u00e9s. Tout est d\u00e9taill\u00e9 dans la documentation.</p>"},{"location":"2-Formation/Symfony/entities/#dans-le-code-source","title":"Dans le code source","text":"<p>Pour stocker une entit\u00e9 :</p> <pre><code>// Cr\u00e9ation ou r\u00e9cup\u00e9ration\n$maVoiture = new Voiture();\n$maVoiture $entityManager-&gt;getRepository(Voiture::class)-&gt;find(5);\n\n// Modification\n$maVoiture-&gt;setVitesse(50);\n\n// Stockage apr\u00e8s cr\u00e9ation ou modification\n$entityManager-&gt;persist($maVoiture);\n\n//Suppression\n$entityManager-&gt;remove($maVoiture);\n\n// Enregistrement des modifications\n$entityManager-flush();\n</code></pre>"},{"location":"3-Organisation/","title":"Organisation","text":"<p>Merci de lire les conventions.</p>"},{"location":"3-Organisation/#pourquoi","title":"Pourquoi","text":"<p>Le fichier pdf de pr\u00e9sentation pr\u00e9sent dans se dossier vous r\u00e9sumera le pourquoi. Pensez \u00e0 le t\u00e9l\u00e9charger, la visionnieuse github affiche mal les diagrammes.</p>"},{"location":"3-Organisation/#comment","title":"Comment","text":"<p>Nous utilisons Github Project (projet Etu UTT) pour nous r\u00e9partir les t\u00e2ches de d\u00e9veloppement.</p> <p>L'organisation d\u00e9crite dans le pdf prend forme ainsi :</p>"},{"location":"3-Organisation/#back","title":"Back","text":"<ul> <li>API (autorisation, gestion et traitement des requ\u00eates transmises par la gateway)<ul> <li>Repo ungdev/etuutt-api</li> <li>Repo ungdev/etuutt-files</li> </ul> </li> <li>Gateway (authentification des utilisateurs) sur ungdev/etuutt-gateway</li> </ul>"},{"location":"3-Organisation/#front","title":"Front","text":"<ul> <li>Front classique ungdev/etuutt-front</li> <li>Appli Mobile MyUTT sur ungdev/my-utt-mobile</li> </ul>"},{"location":"3-Organisation/#design","title":"Design","text":"<p>Il y a un trello pour indiquer les t\u00e2ches.</p> <p>On utilise Figma pour les maquettes * Pour le front * Pour l'appli mobile</p>"},{"location":"3-Organisation/#comment-contribuer","title":"Comment contribuer","text":"<p>Lire le fichier <code>CONTRIBUTE.md</code> pr\u00e9sent dans ce dossier.</p>"},{"location":"3-Organisation/CONTRIBUTE/","title":"\ud83d\udcbb Contribute","text":""},{"location":"3-Organisation/CONTRIBUTE/#develop-a-feature","title":"\ud83d\udce6 Develop a feature","text":""},{"location":"3-Organisation/CONTRIBUTE/#1-start-a-feature-branch","title":"1. \u2728 Start a feature branch:","text":"<p>be sure to start from <code>develop</code> branch :</p> <pre><code>$ git checkout develop\n</code></pre> <p>Than, create the branch :</p> <pre><code>$ git checkout -b \"feature/name-of-the-feature\"\n</code></pre>"},{"location":"3-Organisation/CONTRIBUTE/#2-start-working-on-your-feature","title":"2. \ud83d\udcbb Start working on your feature","text":"<p>Code, create files, ...</p>"},{"location":"3-Organisation/CONTRIBUTE/#3-commit","title":"3. Commit","text":"<p>Every time you do a small thing for your feature, COMMIT. It is very important you break your code in small parts. It would be easier to review it.</p> <p>First, select the files you want to add to the commit :</p> <pre><code>$ git add name_of_the_file\n</code></pre> <p>Or easier : go to the git tab in VSCode. You can find it on the left of the editor, just after the loop. You will see all the modified files, with a + next to them when you hover them. Click on + to add the file in the commit.</p> <p>To commit, use :</p> <pre><code>$ git cz\n</code></pre> <p>This will ask you some questions :</p> <ul> <li>type of commit : is it a feature, some doc, tests,...</li> <li>what file or what's globally inside the commit</li> <li>a small description of the commit</li> </ul> <p>The 3 first questions will determine the title of the commit</p> <ul> <li>a longer description of the commit (optional)</li> <li>other question you do not have to answer them, just press enter</li> </ul> <p>You now have committed your work!</p>"},{"location":"3-Organisation/CONTRIBUTE/#4-code-review","title":"4. \ud83d\udc40 Code Review","text":"<ol> <li>Rebase your feature branch onto the <code>develop</code> branch to ensure it is up-to-date (in case someone did something while you did yours)</li> </ol> <p><code>bash    $ git pull --rebase origin dev</code></p> <ol> <li>Push the code to github :</li> </ol> <p><code>bash    $ git push</code></p> <ol> <li> <p>When pushing, git will give you a like to create a pull request. Create one</p> </li> <li> <p>Ask for a thorough Code Review by a Code Owner</p> </li> </ol>"},{"location":"3-Organisation/CONTRIBUTE/#5-merge-your-feature-back-into-the-develop-branch","title":"5. \ud83d\udce6 Merge your feature back into the <code>develop</code> branch","text":"<p>Only when validated by the code owner. This will start the deployment on develop (TODO)</p>"},{"location":"3-Organisation/CONTRIBUTE/#6-test-validate-your-feature-on-the-develop-website","title":"6. \ud83d\udcf1 Test &amp; validate your feature on the develop website","text":"<p>Go to develop website. Your feature will be applied on it when the deployment is finished. A message will be sent on slack when the deployment is over (TODO)</p>"},{"location":"3-Organisation/CONTRIBUTE/#go-back-to-readme","title":"Go back to README","text":""},{"location":"3-Organisation/Conventions/","title":"Conventions de nommage","text":"<p>Comment choisir ses noms pour ses variables ?</p>"},{"location":"3-Organisation/Conventions/#quelques-conventions","title":"Quelques conventions","text":"<p>Plusieurs conventions existent : * camelCase : <code>maVariable</code>. Tous les mots attach\u00e9s, premi\u00e8re lettre de chaque mot en majuscule, sauf la premi\u00e8re lettre. * PascalCase : <code>MaVariable</code>. Comme le camelCase, mais premi\u00e8re lettre en majuscule. * snake_case : <code>ma_variable</code>. Tous les mots en minuscule, s\u00e9par\u00e9s par des underscores * SCREAMING_SNAKE_CASE : <code>MA_VARIABLE</code>. Comme snake_case, mais en majuscule. * kebab-case : <code>ma-variable</code>. Tous les mots en minuscules, s\u00e9par\u00e9s par des tirets.</p>"},{"location":"3-Organisation/Conventions/#pour-notre-projet","title":"Pour notre projet","text":"<ul> <li>Nom de classe : PascalCase. Attention, en PHP, une seule classe par fichier, et le fichier doit porter le m\u00eame nom que la classe, avec l'extension <code>.php</code>.</li> <li>Constante globale : SCREAMING_SNAKE_CASE</li> <li>Variables d'environnement : SCREAMING_SNAKE_CASE</li> <li>Nom d'une variable : camelCase</li> <li>Tout ce qui touche de pr\u00e8s \u00e0 la BDD ou les formulaires Symfony (requ\u00eates directes) \u00e9crites en snake case</li> </ul>"},{"location":"3-Organisation/Conventions/#petits-tips-dans-notre-projet","title":"Petits tips dans notre projet","text":"<ul> <li>Les classes controllers Symfony doivent toujours se terminer par <code>Controller</code></li> <li>Les classes formulaires en Symfony doivent toujours se terminer par <code>Type</code>. De l'ext\u00e9rieur, ces formulaires peuvent \u00eatre remplis via une requete POST x-www-form-urlencoded avec dans le body les champs de type nom_formulaire_sans_type[champ].</li> </ul>"},{"location":"3-Organisation/Conventions/#linting","title":"Linting","text":"<p>Nous avons plusieurs mani\u00e8res syntaxiques d'\u00e9crire notre code (mettre des espaces, des sauts de ligne, des commentaires, ...). Afin d'\u00eatre s\u00fbr que le code soit homog\u00e8ne, on utilise du linting. C'est un processus (souvent via un outil d\u00e9di\u00e9) qui v\u00e9rifie que le code que vous avez envoy\u00e9 correspond aux conventions du projet.</p>"},{"location":"3-Organisation/Conventions/#php-coding-standards-fixer","title":"Php Coding Standards Fixer","text":"<p>Pour Php, nous utilisons php-cs-fixer, il permet \u00e0 la fois de v\u00e9rifier du code, mais aussi de corriger automatiquement le code pour suivre la convention ! Il se pr\u00e9sente sous la forme d'un package composer (install\u00e9 dans tous les projets etuutt-* du back).</p> <p>Les conventions suivies sont d\u00e9finies \u00e0 la racine du projet dans le fichier <code>.php_cs.dist</code>. Les conventions (ou ruleset) sont list\u00e9es ici (en haut \u00e0 droite, set). Les conventions dites risky peuvent casser le code en modifiant son sens, mais dans des cas tr\u00e8s particuliers.</p> <p>Les conventions suivies pour le back sont les conventions/ruleset :</p> <ul> <li>Symfony (y compris risky)</li> <li>PhpCsFixer (y compris risky)</li> <li>DoctrineAnnotation</li> <li>PSR1</li> <li>PSR2</li> <li>Syntaxe courte des tableaux (utiliser les crochets et non <code>array()</code>)</li> </ul> <p>Nous suivons aussi la convention PSR4, mais pas besoin de la v\u00e9rifier sinon le code ne fonctionne pas de base (car indispensable pour Symfony), ce n'est donc plus de l'ordre du linting. Cette convention permet de trouver rapidement o\u00f9 sont les classes en les chargeant automatiquement directement depuis les fichiers sources et en les faisant correspondre automatiquement aux espaces de noms associ\u00e9s.</p> <p>Une commande \u00e0 retenir pour adapter automatiquement son code : <code>php vendor/bin/php-cs-fixer fix src</code>. On appelle l'ex\u00e9cutable du package (dans le dossier vendor) et on lui dit de r\u00e9parer le contenu du dossier src. Vous devez le faire avant chaque commit !</p> <p>Une pull request dont le linting n'est pas correct sera bloqu\u00e9 automatiquement, car Travis, notre outil d'int\u00e9gration continue (concept d'int\u00e9grer des petits morceaux de code r\u00e9guli\u00e8rement dans le code source complet en v\u00e9rifiant r\u00e9guli\u00e8rement sa qualit\u00e9) v\u00e9rifie de son c\u00f4t\u00e9 que les ruleset sont appliqu\u00e9s (cf le fichier <code>.travis.yml</code> \u00e0 la racine du dossier).</p> <p>D'autres outils existent, comme Php CodeSniffer ou Php Mess Detector, mais nous ne les utilisons pas encore pour le moment.</p>"}]}